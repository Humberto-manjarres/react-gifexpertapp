{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","console","log","categ","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","elemento","ReactDOM","render","document","getElementById"],"mappings":"oNAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAmB9C,OACI,sBAAMC,SAZY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,EAC3BC,QAAQC,IAAI,0BAEZV,GAAc,SAAAW,GAAK,OAAMT,GAAN,mBAAqBS,OACxCR,EAAc,MAMlB,SACI,uBAAOS,KAAK,OAAOC,MAAOX,EAAYY,SAlBnB,SAACT,GACxBF,EAAcE,EAAEU,OAAOF,aAuB/Bd,EAAYiB,UAAU,CAClBhB,cAAeiB,IAAUC,KAAKC,Y,mCChCrBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Cd,QAAQC,IAAImB,GAbO,kBAcZA,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/B2B,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAbAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAd,GAGEY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAI1B,CAACpB,IAEGqB,EDZwBI,CAAazB,GAA/Ba,EANsB,EAM5BN,KAAaa,EANe,EAMfA,QAOpB,OACI,qCACI,oBAAIJ,UAAU,yCAAd,SAAwDhB,IAEvDoB,GAAW,mBAAGJ,UAAU,wCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEpB5Be,EAAe,WAAO,IAAD,EAEM9C,mBAAS,CAAC,cAFhB,mBAEvB+C,EAFuB,KAEXhD,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQgD,EAAWlB,KAAI,SAACmB,GAAD,OACX,cAAC,EAAD,CAEI5B,SAAU4B,GADLA,Y,MCdjCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.88ea8d0f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// CUADRO DE TEXTO\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handledInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handledSubmit = (e) => {\r\n        e.preventDefault();//elimina el comportamiento refresh del url\r\n        if (inputValue.trim().length < 2) {\r\n            console.log('debe digitar un texto');\r\n        } else {\r\n            setCategories(categ => [ inputValue, ...categ]);\r\n            setinputValue('');//colocamos el estado inicial del campo de texto vacio.\r\n        }\r\n\r\n        //console.log('Submit hecho')\r\n    }\r\n    return (\r\n        <form onSubmit={handledSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handledInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.prototype={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=96ATrSidrA27uJUM5gPEAJopSnOm3VNq`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    console.log(gifs);\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    //console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title}></img>\r\n           <p>{title}</p> \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // const [images, setimages] = useState([]);\r\n    // useEffect(()=>{\r\n    //     getGifs(category).then(setimages);\r\n    // },[])\r\n\r\n    const {data: images,loading} = useFetchGifs(category);\r\n    \r\n    \r\n\r\n    \r\n\r\n    //console.log('mostrar-->'+images.map(x => x.title))\r\n    return (\r\n        <>\r\n            <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className=\"card animate__animated animate__flash\">Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map((img) =>(\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img} />\r\n                        ))\r\n                    }\r\n                    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n// CUSTOM HOOKS\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(img =>{\r\n                    //cada vez que el setState cambie los valores del state\r\n                    //se dispara una renderización porq cambió la category\r\n                    setstate({\r\n                        data: img,\r\n                        loading: false\r\n                    });\r\n\r\n            })\r\n    }, [category])\r\n\r\n    return state;    \r\n}\r\n","import { useState } from \"react\";\r\nimport React from 'react'\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n//import { Button } from \"./components/Button\";\r\n\r\n//LISTA ARRAYS\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n            {/* <Button />  */}\r\n            <ol>\r\n                {\r\n                    categories.map((elemento) => \r\n                        <GifGrid \r\n                            key={elemento}\r\n                            category={elemento} \r\n                        /> \r\n                    )\r\n                }\r\n            </ol>\r\n               \r\n        </>\r\n    )\r\n}\r\n\r\n//<li key={elemento}> {elemento}</li>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}